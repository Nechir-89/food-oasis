name: Build Image & Deploy into AWS ECS
on:
  push:
    branches:
      - aws-deployment

env:
  DOCKER_REPOSITORY: foodoasisla/foodoasisla
  AWS_ECS_CLUSTER_NAME: foodoasis-dev
  AWS_APP_ENVNAME: foodoasis-dev
  AWS_REGION_PROD: us-west-1
  AWS_REGION_STAGE: us-west-1
  
jobs:
  production-deploy:
    name: Deploy production into AWS
    if: github.ref == 'refs/heads/aws-deployment'
    runs-on: ubuntu-latest

    steps:
    - name: Debug Action
      uses: hmarr/debug-action@v1.0.0
      
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION_PROD }}

    - name: Pull Task Definition
      id: aws-task-definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.AWS_APP_ENVNAME }}-td \
          --query taskDefinition | jq .taskDefinitionArn

    # - name: Build and push Image DockerHub
    #   id: docker_build
    #   uses: docker/build-push-action@v2
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
    #     repository: ${{ env.DOCKER_REPOSITORY }}
    #     dockerfile: ./Dockerfile
    #     tag_with_ref: true
    #     tag_with_sha: true
    #     add_git_labels: true

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: infrastructure/templates/task-definition.json
        container-name: ${{ env.AWS_APP_ENVNAME }}-container
        # image: ${{ steps.docker_build.outputs.digest }}
        image: foodoasisla/foodoasisla:main

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-definition.outputs.task-definition }}
    #     service: ${{ env.AWS_APP_ENVNAME }}
    #     cluster: ${{ env.AWS_ECS_CLUSTER_NAME }}
    #     wait-for-service-stability: true
    #     wait-for-minutes: 5 minutes
