# build and push a docker image from the latest push to "develop" branch
on:
  push:
    branches:
      - aws-deployment
  release:
    types:
      - published

env:
  DOCKER_REPOSITORY: foodoasisla/foodoasisla
  AWS_ECS_CLUSTER_NAME: foodoasis-dev
  AWS_APP_ENVNAME: foodoasis-dev
  
jobs:
  # webapi:
  #   runs-on: ubuntu-latest
  #   name: Build and push Web API Container to Docker Hub
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v2
  #     - name: build-and-push-image
  #       uses: docker/build-push-action@v1
  #       with:
  #         dockerfile: ./Dockerfile-jared
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #         repository: ${{ env.DOCKER_REPOSITORY }}
  #         tag_with_ref: true
  #         tag_with_sha: true
  #         add_git_labels: true
  #         labels: description="Food Oasis",maintained="foodoasis+hub@hackforla.org"
  # fullstack:
  #   runs-on: ubuntu-latest
  #   name: Build and push Full-Stack Container to Docker Hub
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v2
  #     - name: build-and-push-image
  #       uses: docker/build-push-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #         repository: ${{ env.DOCKER_REPOSITORY }}
  #         dockerfile: ./Dockerfile
  #         tag_with_ref: true
  #         tag_with_sha: true
  #         add_git_labels: true
  #         labels: description="Food Oasis",maintained="foodoasis+hub@hackforla.org"

  production-deploy:
    name: Deploy production into AWS
    runs-on: ubuntu-latest

    steps:
    - name: Debug Action
      uses: hmarr/debug-action@v1.0.0
      
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1
      
    # In this step, this action saves a list of existing images,
    # the cache is created without them in the post run.
    # It also restores the cache if it exists.
    # - uses: satackey/action-docker-layer-caching@v0.0.11
    #   # Ignore the failure of a step and avoid terminating the job.
    #   continue-on-error: true

    # - name: Client - Build, Tag, Push image to ECR
    #   id: client-build
    #   uses: whoan/docker-build-with-cache-action@v5.9.0
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
    #     dockerfile: ./Dockerfile
    #     stages_image_name: ${{ env.DOCKER_REPOSITORY }}
    #     image_name: ${{ env.DOCKER_REPOSITORY }}
    #     image_tag: ${{ github.sha }},latest
    
    - name: Build and push Image DockerHub
      id: docker-build
      uses: docker/build-push-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.DOCKER_REPOSITORY }}
        dockerfile: infrastructure/Dockerfile
        tag_with_ref: true
        tag_with_sha: true
        add_git_labels: true
        labels:
          - description="Food Oasis"
          - maintained="foodoasis+hub@hackforla.org"

    - name: Test AWS cli commands
      id: aws-task-definition
      run: |
        aws sts get-caller-identity

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: infrastructure/task-definition.json
        container-name: ${{ env.AWS_APP_ENVNAME }}-container
        image: ${{ steps.docker-build.outputs.digest }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-definition.outputs.task-definition }}
        service: ${{ env.AWS_APP_ENVNAME }}
        cluster: ${{ env.AWS_ECS_CLUSTER_NAME }}
        wait-for-service-stability: true
        wait-for-minutes: 5 minutes
